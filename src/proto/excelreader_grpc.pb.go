// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: excelreader.proto

package excelreader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExcelReader_UploadExcelFile_FullMethodName = "/excelreader.ExcelReader/UploadExcelFile"
)

// ExcelReaderClient is the client API for ExcelReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExcelReaderClient interface {
	UploadExcelFile(ctx context.Context, in *ExcelFile, opts ...grpc.CallOption) (*ProcessResponse, error)
}

type excelReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewExcelReaderClient(cc grpc.ClientConnInterface) ExcelReaderClient {
	return &excelReaderClient{cc}
}

func (c *excelReaderClient) UploadExcelFile(ctx context.Context, in *ExcelFile, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, ExcelReader_UploadExcelFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExcelReaderServer is the server API for ExcelReader service.
// All implementations must embed UnimplementedExcelReaderServer
// for forward compatibility
type ExcelReaderServer interface {
	UploadExcelFile(context.Context, *ExcelFile) (*ProcessResponse, error)
	mustEmbedUnimplementedExcelReaderServer()
}

// UnimplementedExcelReaderServer must be embedded to have forward compatible implementations.
type UnimplementedExcelReaderServer struct {
}

func (UnimplementedExcelReaderServer) UploadExcelFile(context.Context, *ExcelFile) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadExcelFile not implemented")
}
func (UnimplementedExcelReaderServer) mustEmbedUnimplementedExcelReaderServer() {}

// UnsafeExcelReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExcelReaderServer will
// result in compilation errors.
type UnsafeExcelReaderServer interface {
	mustEmbedUnimplementedExcelReaderServer()
}

func RegisterExcelReaderServer(s grpc.ServiceRegistrar, srv ExcelReaderServer) {
	s.RegisterService(&ExcelReader_ServiceDesc, srv)
}

func _ExcelReader_UploadExcelFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExcelFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelReaderServer).UploadExcelFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExcelReader_UploadExcelFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelReaderServer).UploadExcelFile(ctx, req.(*ExcelFile))
	}
	return interceptor(ctx, in, info, handler)
}

// ExcelReader_ServiceDesc is the grpc.ServiceDesc for ExcelReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExcelReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "excelreader.ExcelReader",
	HandlerType: (*ExcelReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadExcelFile",
			Handler:    _ExcelReader_UploadExcelFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "excelreader.proto",
}
